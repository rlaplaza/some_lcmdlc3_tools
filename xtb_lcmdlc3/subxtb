#!/bin/bash

# We assume running this from the script directory
# Run as ./subcrest myinput.xyz

# Constraints can be included by either writing a file called myinput.info or constraints.inp
# Scans can be performed by either writing a file called myinput.scan or scan.inp
# Charge and multiplicity can be accounted for by including plain text files called myinput.chrf and myinput.uhf

export PATH=/home/laplaza/Software/xtb/_build:$PATH

cpunr='8'
memory='2000'

function is_bin_in_path {
     builtin type -P "$1" &> /dev/null
}

function qsbatch {
    sbr="$(sbatch "$@")"
    if [[ "$sbr" =~ Submitted\ batch\ job\ ([0-9]+) ]]; then
        echo "${BASH_REMATCH[1]}"
        exit 0
    else
        echo "sbatch failed"
        exit 1
    fi
}

function usage
{
    cat <<-EOF

        NAME
            subcrest - CREST submission script

        SYNTAX
            subcrest [ options ] <filename>

        DESCRIPTION
            Submits a CREST conformer sampling  calculation with the xyz input file <filename>.
            You may specify <filename> with or without extension "{ .xyz }", but the real
            real existing input file must have the xyz suffix. 

        OPTIONS

            -m <mem>
                Request a queue with a job memory of <mem> MB. The default
                value for <mem> is $memory MB.

            -p <cpunr>
                If you specify the -p option, you can request a parallel
                execution of the job with more than one CPU, which is the
                default. 


EOF

    exit 2
}

function settings()
{
    OPTIND=1

    while getopts :hkm:N:n:o:p:v: options ; do
        case $options in

            m) memory=$OPTARG ;;

            p) CMDOPT_P="1"
               cpunr=$OPTARG ;;

           \?) printExit E "Invalid option: -$OPTARG." ;;

        esac
    done
}


function testFile
{
    if [ ! -r "$1" -o ! -f "$1" ] ; then
        if [ "$2" = "return" ] ; then
            returncode="-1"
        else
            printExit E "Inputfile \"$1\" was not found."
        fi
    else
        returncode="0"
    fi

    return "$returncode"
}

# Basic checks: input exists, basic executables found, etc.
is_bin_in_path xtb  && echo "Found xtb." || printExit E "Could not find xtb executable."
is_bin_in_path crest  && echo "Found crest." || printExit E "Could not find crest executable."
[ -z "$1" ] && usage
job_directory=$(pwd)
input=${1}
pname="${1%%.xyz}"
name="${pname##*/}"
inpname="${name}.xyz"
testFile "$inpname"

settings "$@"

#
# Shift the arguments up to the input without the option prefix "-".
# This should be the filename.
#

shift $((OPTIND-1))



loutput="${name}.out"
natoms=$(head -n 1 ${1})
tmpdir='$SLURM_TMPDIR/$SLURM_JOB_ID'
curdir='$SLURM_SUBMIT_DIR'
checker='$?'

echo "Ready to create jobfile ${name}.job towards ${loutput}"
if [ -f ${job_directory}/${pname}.info ]; then
   echo "Constraint file found!"
   cp ${job_directory}/${pname}.info .xcontrol.sample
else
   echo " " > .xcontrol.sample
fi
if [ -f ${job_directory}/${pname}.scan ]; then
   echo "Scan file found!"
   cp ${job_directory}/${pname}.scan scan.inp
fi
if [ -f ${job_directory}/${pname}.chrg ]; then
   echo "Scan file found!"
   cp ${job_directory}/${pname}.chrg .CHRG
else
   echo " " > .CHRG
fi
if [ -f ${job_directory}/${pname}.uhf ]; then
   echo "Scan file found!"
   cp ${job_directory}/${pname}.uhf .UHF
else
   echo " " > .UHF
fi


echo "#!/bin/bash
#SBATCH -J ${name}
#SBATCH -o ${loutput}
#SBATCH --mem=${memory}
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=${cpunr}
#SBATCH --time=3-00:00:00
module load intel/19.0.4
ulimit -s unlimited
export OMP_STACKSIZE=2G
export OMP_MAX_ACTIVE_LEVELS=1
export OMP_NUM_THREADS=8,1
export MKL_NUM_THREADS=8
mkdir ${tmpdir}
cd ${tmpdir}
cp ${curdir}/${inpname} ${tmpdir}

if [ -f ${curdir}/constraints.inp ]; then
   cp ${curdir}/constraints.inp ${tmpdir}/.xcontrol.sample
fi
if [ -f ${curdir}/scan.inp ]; then
   cp ${curdir}/scan.inp ${tmpdir}/scan.inp
fi
if [ -f ${curdir}/.CHRG ]; then
   cp ${curdir}/.CHRG ${tmpdir}/.CHRG
fi
if [ -f ${curdir}/.UHF ]; then
   cp ${curdir}/.UHF ${tmpdir}/.UHF
fi

if [ -f scan.inp ]; then
   xtb ${inpname} --opt --input scan.inp
else
   xtb -i ${inpname} --opt
fi
if [ ${checker} -eq 0 ]; then
   echo "XTB seems to have terminated normally."
else 
   echo "Run terminated abnormally."
fi

cp xtbopt.xyz ${curdir}/${name}_opt.xyz
cp xtb*.log ${curdir}
if [ ${checker} -eq 0 ]; then
   find . ! -name '*' -type f -exec rm -f {} +
   rm -rf ${tmpdir}
fi
exit " > ${name}.job

sbatch ${name}.job


